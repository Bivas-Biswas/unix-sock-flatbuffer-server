// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_MYSERVER_PAYLOADS_H_
#define FLATBUFFERS_GENERATED_SCHEMA_MYSERVER_PAYLOADS_H_

#include "flatbuffers/flatbuffers.h"

namespace MyServer {
namespace Payloads {

struct EchoRequest;
struct EchoRequestBuilder;

struct ReverseRequest;
struct ReverseRequestBuilder;

struct Root;
struct RootBuilder;

enum AnyPayload {
  AnyPayload_NONE = 0,
  AnyPayload_EchoRequest = 1,
  AnyPayload_ReverseRequest = 2,
  AnyPayload_MIN = AnyPayload_NONE,
  AnyPayload_MAX = AnyPayload_ReverseRequest
};

inline const AnyPayload (&EnumValuesAnyPayload())[3] {
  static const AnyPayload values[] = {
    AnyPayload_NONE,
    AnyPayload_EchoRequest,
    AnyPayload_ReverseRequest
  };
  return values;
}

inline const char * const *EnumNamesAnyPayload() {
  static const char * const names[4] = {
    "NONE",
    "EchoRequest",
    "ReverseRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnyPayload(AnyPayload e) {
  if (flatbuffers::IsOutRange(e, AnyPayload_NONE, AnyPayload_ReverseRequest)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAnyPayload()[index];
}

template<typename T> struct AnyPayloadTraits {
  static const AnyPayload enum_value = AnyPayload_NONE;
};

template<> struct AnyPayloadTraits<MyServer::Payloads::EchoRequest> {
  static const AnyPayload enum_value = AnyPayload_EchoRequest;
};

template<> struct AnyPayloadTraits<MyServer::Payloads::ReverseRequest> {
  static const AnyPayload enum_value = AnyPayload_ReverseRequest;
};

bool VerifyAnyPayload(flatbuffers::Verifier &verifier, const void *obj, AnyPayload type);
bool VerifyAnyPayloadVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct EchoRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EchoRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct EchoRequestBuilder {
  typedef EchoRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(EchoRequest::VT_MESSAGE, message);
  }
  explicit EchoRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EchoRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EchoRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<EchoRequest> CreateEchoRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  EchoRequestBuilder builder_(_fbb);
  builder_.add_message(message);
  return builder_.Finish();
}

inline flatbuffers::Offset<EchoRequest> CreateEchoRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return MyServer::Payloads::CreateEchoRequest(
      _fbb,
      message__);
}

struct ReverseRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReverseRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           verifier.EndTable();
  }
};

struct ReverseRequestBuilder {
  typedef ReverseRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(ReverseRequest::VT_DATA, data);
  }
  explicit ReverseRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ReverseRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ReverseRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReverseRequest> CreateReverseRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> data = 0) {
  ReverseRequestBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<ReverseRequest> CreateReverseRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *data = nullptr) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return MyServer::Payloads::CreateReverseRequest(
      _fbb,
      data__);
}

struct Root FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RootBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  MyServer::Payloads::AnyPayload payload_type() const {
    return static_cast<MyServer::Payloads::AnyPayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const MyServer::Payloads::EchoRequest *payload_as_EchoRequest() const {
    return payload_type() == MyServer::Payloads::AnyPayload_EchoRequest ? static_cast<const MyServer::Payloads::EchoRequest *>(payload()) : nullptr;
  }
  const MyServer::Payloads::ReverseRequest *payload_as_ReverseRequest() const {
    return payload_type() == MyServer::Payloads::AnyPayload_ReverseRequest ? static_cast<const MyServer::Payloads::ReverseRequest *>(payload()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyAnyPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const MyServer::Payloads::EchoRequest *Root::payload_as<MyServer::Payloads::EchoRequest>() const {
  return payload_as_EchoRequest();
}

template<> inline const MyServer::Payloads::ReverseRequest *Root::payload_as<MyServer::Payloads::ReverseRequest>() const {
  return payload_as_ReverseRequest();
}

struct RootBuilder {
  typedef Root Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_payload_type(MyServer::Payloads::AnyPayload payload_type) {
    fbb_.AddElement<uint8_t>(Root::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Root::VT_PAYLOAD, payload);
  }
  explicit RootBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Root> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Root>(end);
    return o;
  }
};

inline flatbuffers::Offset<Root> CreateRoot(
    flatbuffers::FlatBufferBuilder &_fbb,
    MyServer::Payloads::AnyPayload payload_type = MyServer::Payloads::AnyPayload_NONE,
    flatbuffers::Offset<void> payload = 0) {
  RootBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

inline bool VerifyAnyPayload(flatbuffers::Verifier &verifier, const void *obj, AnyPayload type) {
  switch (type) {
    case AnyPayload_NONE: {
      return true;
    }
    case AnyPayload_EchoRequest: {
      auto ptr = reinterpret_cast<const MyServer::Payloads::EchoRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AnyPayload_ReverseRequest: {
      auto ptr = reinterpret_cast<const MyServer::Payloads::ReverseRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyAnyPayloadVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAnyPayload(
        verifier,  values->Get(i), types->GetEnum<AnyPayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const MyServer::Payloads::Root *GetRoot(const void *buf) {
  return flatbuffers::GetRoot<MyServer::Payloads::Root>(buf);
}

inline const MyServer::Payloads::Root *GetSizePrefixedRoot(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MyServer::Payloads::Root>(buf);
}

inline const char *RootIdentifier() {
  return "PLDE";
}

inline bool RootBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, RootIdentifier());
}

inline bool VerifyRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MyServer::Payloads::Root>(RootIdentifier());
}

inline bool VerifySizePrefixedRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MyServer::Payloads::Root>(RootIdentifier());
}

inline void FinishRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MyServer::Payloads::Root> root) {
  fbb.Finish(root, RootIdentifier());
}

inline void FinishSizePrefixedRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MyServer::Payloads::Root> root) {
  fbb.FinishSizePrefixed(root, RootIdentifier());
}

}  // namespace Payloads
}  // namespace MyServer

#endif  // FLATBUFFERS_GENERATED_SCHEMA_MYSERVER_PAYLOADS_H_
