# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Payloads

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EchoRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEchoRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EchoRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def EchoRequestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x4C\x44\x45", size_prefixed=size_prefixed)

    # EchoRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EchoRequest
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EchoRequestStart(builder): builder.StartObject(1)
def EchoRequestAddMessage(builder, message): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)
def EchoRequestEnd(builder): return builder.EndObject()
